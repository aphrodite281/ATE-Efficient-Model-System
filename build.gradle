import org.apache.tools.ant.filters.ReplaceTokens

import java.time.Instant

plugins {
	id "architectury-plugin" version "3.4.160"
	id "dev.architectury.loom" version "1.9.424" apply false
	id "de.undercouch.download" version "4.1.2"
	id "com.github.johnrengelman.shadow" version "8.1.1"
	id "io.github.pacifistmc.forgix" version "1.2.9"
	id "base"
}

ext {
    graaljsVersion = "23.1.7"// 22.3.0 24.2.1 23.0.8
}

apply from: "build_dep_ver.gradle"

rootProject.ext.assetExcludeFont = rootProject.properties.containsKey("assetExcludeFont")

architectury {
	minecraft = minecraft_version
}

configure(subprojects) {
	apply plugin: "dev.architectury.loom"

	loom {
		silentMojangMappingsLicense()
	}

	configurations {
		shadowCommon
	}

	dependencies {
		implementation 'org.joml:joml:+'
		annotationProcessor 'systems.manifold:manifold-preprocessor:+'
		minecraft "com.mojang:minecraft:${minecraft_version}"
		mappings parchment_version == "" ? loom.officialMojangMappings() : loom.layered() {
			officialMojangMappings()
			parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
		}
	}

	build.finalizedBy(mergeJars)
	assemble.finalizedBy(mergeJars)
}

build {
	copy {
		outputs.upToDateWhen { false }
		from "common/src/main/BuildConfigTemplate.java"
		into "common/src/main/java/cn/aph281/ate/ems"
		filter(ReplaceTokens, tokens: [
				"version": rootProject.mod_version + "+" + minecraft_version,
				"build_time": Instant.now().epochSecond.toString()
		])
		rename "(.+)Template.java", "\$1.java"
	}
}

configure(allprojects) {
	apply plugin: "architectury-plugin"

	version = rootProject.mod_version + "+" + minecraft_version
	group = project.maven_group

	repositories {
		maven { url = "https://maven.terraformersmc.com/" }
		maven { url = "https://maven.parchmentmc.org/" }
		maven { url "https://maven.shedaniel.me"}
		maven { url "https://repo1.maven.org/maven2/" }
		maven { url "https://nexus.velocitypowered.com/repository/maven-public/" }
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
    	options.incremental = true;
		

		if (minecraft_main_version == 16) {
			def targetVersion = 8
			if (JavaVersion.current().isJava9Compatible()) {
				options.release.set(targetVersion)
			}
		} else if (minecraft_main_version == 17) {
			options.release.set(16)
		} else {
			options.release.set(17)
		}

        options.compilerArgs += ['-Xplugin:Manifold', '-AMC_VERSION=' + minecraft_version_int]
		if (project.hasProperty("debug") && project.property('debug').toBoolean()) {
			options.compilerArgs += ['-ADEBUG=true']
		}
	}
}

forgix {
	group = "cn.aph281.ate"
	mergedJarName = "ATE-EMS" + "-" + rootProject.mod_version + "+" + minecraft_version + ".jar"
	outputDir = "build/"

	forge {
		projectName = "forge"
		jarLocation = "build/libs/forge" + "-" + rootProject.mod_version + "+" + minecraft_version + ".jar"
	}

	fabric {
		projectName = "fabric"
		jarLocation = "build/libs/fabric" + "-" + rootProject.mod_version + "+" + minecraft_version + ".jar"
	}
}

import org.gradle.api.internal.file.copy.CopyAction;
import org.gradle.api.internal.file.copy.CopyActionProcessingStream;

class DummyArchiveTask extends AbstractArchiveTask {

	protected CopyAction createCopyAction() {
		return new DummyCopyAction();
	}

	class DummyCopyAction implements CopyAction {

		@Override
		WorkResult execute(CopyActionProcessingStream stream) {
			return WorkResults.didWork(true);
		}
	}
}

tasks.register('dummyForgixOutput', DummyArchiveTask) {
	// Forgix's mergeJars task doesn't extend AbstractArchiveTask.
	// This is to make github.com/teaconmc/longjing happy.

	destinationDirectory = file("build/")
	archiveBaseName = "ATE-EMS"
	archiveVersion = rootProject.mod_version + "+" + minecraft_version
	archiveExtension = "jar"
}

tasks.withType(JavaCompile) {
    outputs.cacheIf { true }
    options.incremental = true;
}

