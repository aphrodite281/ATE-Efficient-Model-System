plugins {
	id "com.github.johnrengelman.shadow"
}

architectury {
	platformSetupLoomIde()
	fabric()
}

repositories {
	maven {
		name = "TerraformersMC"
		url = uri("https://maven.terraformersmc.com/releases")
	}
}

loom {
	mixin {
		defaultRefmapName = "mixins.ate_ems.refmap.json"
	}
	accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

dependencies {
	modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
	modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

	modApi("com.terraformersmc:modmenu:${rootProject.ext.mod_menu_version}") { transitive false }

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand (
			"version": project.version,
			"minecraft_version": rootProject.supports_minecraft_version
		)
	}
}

shadowJar {
	mergeServiceFiles() 

	exclude "*.bmp"
	exclude '**/*.kotlin_metadata'
    exclude '**/*.kotlin_module'
    exclude '**/*.kotlin_builtins'

	configurations = [project.configurations.shadowCommon]
	archiveClassifier = "dev-shadow"
}

static boolean matchInnerClass(String path, String... names) {
	names.any { name -> path.startsWith(name) }
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier = null
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

task moveFabricBuilds() {
	doLast {
		delete fileTree("../build").matching {
			include "**/MTR-ANTE-fabric*"
		}
		copy {
			from "build/libs"
			into "../build"
			exclude "*dev-shadow.jar"
			rename "(.+)", "MTR-ANTE-\$1"
		}
	}
}
